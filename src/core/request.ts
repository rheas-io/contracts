import { IApp } from './app';
import { IRoute } from '../routes';
import { IHeaders } from './headers';
import { IResponse } from './response';
import { AnyObject } from './keyValue';
import { IncomingMessage } from 'http';
import { IContainer } from '../container';
import { IRedirector } from './redirector';
import { IRequestInput } from './requestInput';
import { IRequestParams } from './requestParams';
import { IRequestComponent } from '../routes/uri';
import { IRequestContent } from './requestContent';

export interface IRequest extends IncomingMessage, IContainer {
    /**
     * Boots the request with services and containers.
     *
     * @returns IRequest
     */
    boot(app: IApp, res: IResponse): Promise<IRequest>;

    /**
     * Sets the matching route of this request. Load the route
     * parameters here.
     *
     * @param route
     */
    setRoute(route: IRoute): IRequest;

    /**
     * Returns the request redirector service.
     *
     * @returns IRedirector
     */
    redirect(): IRedirector;

    /**
     * Returns the request header manager.
     *
     * @returns
     */
    reqHeaders(): IHeaders;

    /**
     * Returns the request content manager. Responsible for anything
     * related to content-types, formats, mime-types etc.
     *
     * @returns
     */
    contents(): IRequestContent;

    /**
     * Returns the request inputs manager. Manages all the input fields
     * of a request.
     *
     * @returns
     */
    inputs(): IRequestInput;

    /**
     * Returns the request body contents as an object.
     *
     * @returns
     */
    body(): AnyObject;

    /**
     * Returns the uploaded files with form_name as the key.
     *
     * @var AnyObject
     */
    files(): AnyObject;

    /**
     * Returns the query objects.
     *
     * @returns
     */
    query(): AnyObject;

    /**
     * Returns the matching route params of this request url.
     *
     * @returns IRequestParams
     */
    params(): IRequestParams;

    /**
     * Checks if the request came through a secure channel
     *
     * @return boolean
     */
    isSecure(): boolean;

    /**
     * Gets the request schema https/http
     *
     * @return string
     */
    getSchema(): string;

    /**
     * Gets the request hostname
     *
     * @return string
     */
    getHost(): string;

    /**
     * Gets the request path respective to the root/host
     *
     * @return string
     */
    getPath(): string;

    /**
     * Returns the request path segments generated by splitting
     * the path using forward slash (/)
     *
     * @return array
     */
    getPathComponents(): IRequestComponent[];

    /**
     * Returns the full url of the request including scheme, host,
     * path and query string.
     *
     * @return string
     */
    getFullUrl(): string;

    /**
     * Returns the query string without the leading ?
     *
     * @return string
     */
    getQueryString(): string;

    /**
     * Returns the request method after reading the headers
     * and _method fields
     *
     * @return string
     */
    getMethod(): string;

    /**
     * Returns the actual method
     *
     * @return string
     */
    getRealMethod(): string;
}
