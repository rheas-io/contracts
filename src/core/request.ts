import { IRoute } from '../routes';
import { IHeaders } from './headers';
import { IResponse } from './response';
import { AnyObject } from './keyValue';
import { IncomingMessage } from 'http';
import { IContainer } from '../container';
import { IRedirector } from './redirector';
import { ICookieManager } from '../cookies';
import { IApp, IAppServiceKeys } from './app';
import { IRequestInput } from './requestInput';
import { IRequestParams } from './requestParams';
import { IRequestComponent } from '../routes/uri';
import { IRequestContent } from './requestContent';
import { ISession, ISessionManager } from '../sessions';

export type IRequestServiceKeys = IAppServiceKeys | 'cookie' | 'session' | 'redirect';

export interface IRequest extends IncomingMessage, IContainer {
    /**
     * Boots the request with services and containers.
     *
     * @returns IRequest
     */
    boot(app: IApp, res: IResponse): Promise<IRequest>;

    /**
     * Sets the matching route of this request. Load the route
     * parameters here.
     *
     * @param route
     */
    setRoute(route: IRoute): IRequest;

    /**
     * Returns the request redirector service.
     *
     * @returns IRedirector
     */
    redirect(): IRedirector;

    /**
     * Returns the cookie manager.
     *
     * @returns
     */
    cookies(): ICookieManager;

    /**
     * Returns the request session manager.
     *
     * @returns
     */
    sessions(): ISessionManager;

    /**
     * Returns the request header manager.
     *
     * @returns
     */
    reqHeaders(): IHeaders;

    /**
     * Returns a single string value from the header. An empty
     * string is returned if no header is defined.
     *
     * @param header
     */
    stringFromHeader(header: string): string;

    /**
     * Returns true if the request is read request ie reuest method
     * is one of HEAD, GET and OPTIONS.
     *
     * @returns
     */
    isReadRequest(): boolean;

    /**
     * Returns true if the current request path is exempted in the app
     * exemption list for the key.
     *
     * @param exemptKey
     */
    isExemptedIn(exemptKey: string): boolean;

    /**
     * Returns the current session if the request is CSRF protected. Otherwise
     * returns false.
     *
     * Throws an exception when the session manager is not registered.
     *
     * @returns
     */
    isCsrfProtected(): ISession | false;

    /**
     * Returns the request content manager. Responsible for anything
     * related to content-types, formats, mime-types etc.
     *
     * @returns
     */
    contents(): IRequestContent;

    /**
     * Returns the request inputs manager. Manages all the input fields
     * of a request.
     *
     * @returns
     */
    inputs(): IRequestInput;

    /**
     * Returns the request body contents as an object.
     *
     * @returns
     */
    body(): AnyObject;

    /**
     * Returns the uploaded files with form_name as the key.
     *
     * @var AnyObject
     */
    files(): AnyObject;

    /**
     * Returns the query objects.
     *
     * @returns
     */
    query(): AnyObject;

    /**
     * Returns the matching route params of this request url.
     *
     * @returns IRequestParams
     */
    params(): IRequestParams;

    /**
     * Checks if the request came through a secure channel
     *
     * @return boolean
     */
    isSecure(): boolean;

    /**
     * Gets the request schema https/http
     *
     * @return string
     */
    getSchema(): string;

    /**
     * Gets the request hostname
     *
     * @return string
     */
    getHost(): string;

    /**
     * Gets the request path respective to the root/host
     *
     * @return string
     */
    getPath(): string;

    /**
     * Returns the request path segments generated by splitting
     * the path using forward slash (/)
     *
     * @return array
     */
    getPathComponents(): IRequestComponent[];

    /**
     * Returns the full url of the request including scheme, host,
     * path and query string.
     *
     * @return string
     */
    getFullUrl(): string;

    /**
     * Returns the query string without the leading ?
     *
     * @return string
     */
    getQueryString(): string;

    /**
     * Returns the request method after reading the headers
     * and _method fields
     *
     * @return string
     */
    getMethod(): string;

    /**
     * Returns the actual method
     *
     * @return string
     */
    getRealMethod(): string;

    /**
     * Returns the binding stored in this container. Throws an exception
     * if no binding is registered for the key, or there are any error
     * resolving the binding.
     *
     * @param key
     */
    get(key: IRequestServiceKeys): any;
    get(key: string): any;
}
